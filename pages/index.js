import Head from 'next/head'
import { useDispatch, useSelector } from 'react-redux'
import Header from '../components/header'
import Button from '../components/button'
import Dropdown from '../components/dropdown'
import { getToDo } from '../redux/state/todoSlice'
import { getToDoList } from '../controller/dataController'
import { useEffect, useState } from 'react'
import NoTask from '../components/noTask'
import TaskOverview from '../components/taskOverview'
import { controlModal } from '../redux/state/modalSlice'
import Task from '../components/popup'
import modalData from '../model/modal'
import Pagination from '../components/pagination'
import perPageData from '../utils/paginateData'

export default function Home() {
  const [loadPage, setLoadPage] = useState(false)
  const [todoData, setTodoData] = useState([])
  const [currentPage, setCurrentPage] = useState(1)
  const todoList = useSelector((state) => state.todo.todoList)
  var getModalData = useSelector((state) => state.modal.modalControlData)
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(getToDo(getToDoList()))
    setLoadPage(true)
  }, [])

  useEffect(() => {
    console.log('refreshed')
    let indexOfLastPost = currentPage * perPageData
    let indexofFirstPost = indexOfLastPost - perPageData
    setTodoData(todoList.slice(indexofFirstPost, indexOfLastPost))

  }, [loadPage, todoList, currentPage])

  const _controlModal = (isDisplay, title, type) => {
    dispatch(controlModal(modalData(isDisplay, title, type)))
  }


  return loadPage ? (
    <div>
      <Head>
        <title>mm todo app</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className='w-4/5 m-auto 2xl:w-2/4 mb-14 min-h' >
        <section id={'header-label-section'}>
          <Header />
        </section>

        <section id={"popup-screen-section"}>
          <Task setModal={_controlModal} modal={getModalData} />
        </section>

        <section id={'controll-button-section'}>
          <Button
            button="add_task"
            onClick={() => { _controlModal(true, "Add A New Task", "create") }}
          />
          <Dropdown dispatch={dispatch} className='float-right' />
        </section>

        <section id={'todo-list-section'} className='  bg-slate-300 m-aut mt-7 py-7 px-7 shadow-lg rounded-2xl ' style={{}}>
          {
            todoData.length ? todoData.map(itm => (
              <TaskOverview key={itm.id} data={itm} setModal={_controlModal} />
            )) : <NoTask />
          }
        </section>

        <section id={'pagination-controller'}>

          <Pagination todoPerPage={perPageData} totaltodo={todoList.length} paginate={setCurrentPage} currentPage={currentPage}/>

        </section>
      </main>

    </div>
  ) : ''
}
